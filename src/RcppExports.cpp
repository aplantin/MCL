// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mclC
Rcpp::List mclC(arma::mat Z, arma::mat W, arma::vec y, arma::vec facZ, arma::vec facW, arma::vec groups, Rcpp::List groupIdx, double mu, double lam1, double lam2, double thresh, double maxit);
RcppExport SEXP _MCL_mclC(SEXP ZSEXP, SEXP WSEXP, SEXP ySEXP, SEXP facZSEXP, SEXP facWSEXP, SEXP groupsSEXP, SEXP groupIdxSEXP, SEXP muSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP threshSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type facZ(facZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type facW(facWSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type groupIdx(groupIdxSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(mclC(Z, W, y, facZ, facW, groups, groupIdx, mu, lam1, lam2, thresh, maxit));
    return rcpp_result_gen;
END_RCPP
}
// findMaxLams
arma::vec findMaxLams(arma::mat Z, arma::mat W, arma::vec y, arma::vec facZ, arma::vec facW, arma::vec groups, Rcpp::List groupIdx, double mu, double maxit, double thresh);
RcppExport SEXP _MCL_findMaxLams(SEXP ZSEXP, SEXP WSEXP, SEXP ySEXP, SEXP facZSEXP, SEXP facWSEXP, SEXP groupsSEXP, SEXP groupIdxSEXP, SEXP muSEXP, SEXP maxitSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type facZ(facZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type facW(facWSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type groupIdx(groupIdxSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(findMaxLams(Z, W, y, facZ, facW, groups, groupIdx, mu, maxit, thresh));
    return rcpp_result_gen;
END_RCPP
}
// signC
double signC(double x);
RcppExport SEXP _MCL_signC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(signC(x));
    return rcpp_result_gen;
END_RCPP
}
// absC
double absC(double x);
RcppExport SEXP _MCL_absC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(absC(x));
    return rcpp_result_gen;
END_RCPP
}
// absC2
arma::vec absC2(arma::vec x);
RcppExport SEXP _MCL_absC2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(absC2(x));
    return rcpp_result_gen;
END_RCPP
}
// softC
double softC(double x, double lam);
RcppExport SEXP _MCL_softC(SEXP xSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(softC(x, lam));
    return rcpp_result_gen;
END_RCPP
}
// softC2
arma::vec softC2(arma::vec x, double lam);
RcppExport SEXP _MCL_softC2(SEXP xSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(softC2(x, lam));
    return rcpp_result_gen;
END_RCPP
}
// sqrtC
double sqrtC(double x);
RcppExport SEXP _MCL_sqrtC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrtC(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MCL_mclC", (DL_FUNC) &_MCL_mclC, 12},
    {"_MCL_findMaxLams", (DL_FUNC) &_MCL_findMaxLams, 10},
    {"_MCL_signC", (DL_FUNC) &_MCL_signC, 1},
    {"_MCL_absC", (DL_FUNC) &_MCL_absC, 1},
    {"_MCL_absC2", (DL_FUNC) &_MCL_absC2, 1},
    {"_MCL_softC", (DL_FUNC) &_MCL_softC, 2},
    {"_MCL_softC2", (DL_FUNC) &_MCL_softC2, 2},
    {"_MCL_sqrtC", (DL_FUNC) &_MCL_sqrtC, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MCL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
